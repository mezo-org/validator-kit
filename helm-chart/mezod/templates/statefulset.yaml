apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "this.name" . | quote }}
  labels:
    {{- include "this.labels" . | nindent 4 }}
    {{- with .Values.labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  replicas: 1
  serviceName: {{ include "this.name" . | quote }}
  selector:
    matchLabels:
      {{- include "this.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "this.selectorLabels" . | nindent 8 }}
        {{- with .Values.labels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- if .Values.customConfigs.enabled }}
      annotations:
        # This annotation ensures the StatefulSet is updated when the ConfigMap changes
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum | quote }}
      {{- end }}
    spec:
      serviceAccountName: {{ include "this.name" . | quote }}
      automountServiceAccountToken: false
      securityContext:
        runAsUser: {{ .Values.securityContext.userId }}
        runAsGroup: {{ .Values.securityContext.groupId }}
        fsGroup: {{ .Values.securityContext.groupId }}
        fsGroupChangePolicy: "OnRootMismatch"
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      volumes:
        - name: dummy-data
          emptyDir: {}
        {{- if .Values.secrets.nodeKey }}
        - name: node-key
          secret:
            secretName: {{ .Values.secrets.nodeKey }}
            items:
              - key: node_key.json
                path: node_key.json
        {{- end }}
        {{- if .Values.customConfigs.enabled }}
        - name: custom-configs
          configMap:
            name: "custom-configs-{{ include "this.name" . }}"
        {{- end }}
      initContainers:
        - name: init-mezod
          image: "{{ .Values.image }}:{{ .Values.tag }}"
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          command:
            - /bin/sh
            - /entrypoint.sh
          args:
            - sh
            - -c
            - "echo 'Init container done'"
          env:
            {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            - name: KEYRING_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.credentials | quote }}
                  key: KEYRING_NAME
            - name: KEYRING_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.credentials | quote }}
                  key: KEYRING_PASSWORD
            - name: KEYRING_MNEMONIC
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.credentials | quote }}
                  key: KEYRING_MNEMONIC
          securityContext:
            capabilities:
              drop:
                - ALL
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: data
              mountPath: {{ .Values.env.MEZOD_HOME | quote }}
            {{- if .Values.customConfigs.enabled }}
            - name: custom-configs
              mountPath: /config/
            {{- end }}
      containers:
        #
        # The main container with the mezod application
        #
        - name: mezod
          image: "{{ .Values.image }}:{{ .Values.tag }}"
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          {{- if .Values.maintenanceMode }}
          command:
            - /bin/sh
            - -c
            - 'trap "exit" TERM; while true; do sleep 1; done'
          {{- else }}
          command:
            - mezod
            - start
            - --home={{ .Values.env.MEZOD_HOME }}
            - --metrics
            - --log_format={{ .Values.env.MEZOD_LOG_FORMAT }}
            - --log_level={{ .Values.env.MEZOD_LOG_LEVEL }}
            - --log_no_color
          {{- end }}
          env:
            {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            - name: KEYRING_NAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.credentials | quote }}
                  key: KEYRING_NAME
            - name: KEYRING_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.credentials | quote }}
                  key: KEYRING_PASSWORD
            - name: KEYRING_MNEMONIC
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.credentials | quote }}
                  key: KEYRING_MNEMONIC
          ports:
            - name: p2p
              containerPort: {{ int (default 26656 .Values.service.public.ports.p2p) }}
              protocol: TCP
            - name: rpc
              containerPort: {{ int (default 26657 .Values.service.public.ports.rpc) }}
              protocol: TCP
            - name: api 
              containerPort: {{ int (default 1317 .Values.service.public.ports.api) }}
              protocol: TCP
            - name: grpc
              containerPort: {{ int (default 9090 .Values.service.public.ports.grpc) }}
              protocol: TCP
            - name: json-rpc 
              containerPort: {{ int (default 8545 (index (default dict .Values.service.public.ports) "json-rpc")) }}
              protocol: TCP
            - name: json-rpc-ws
              containerPort: {{ int (default 8546 (index (default dict .Values.service.public.ports) "json-rpc-ws")) }}
              protocol: TCP
            - name: evm-metrics
              containerPort: {{ int (default 6065 (index (default dict .Values.service.private.ports) "evm-metrics")) }}
              protocol: TCP
            - name: comet-metrics
              containerPort: {{ int (default 26660 (index (default dict .Values.service.private.ports) "comet-metrics")) }}
              protocol: TCP

          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          securityContext:
            capabilities:
              drop:
                - ALL
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: data
              mountPath: {{ .Values.env.MEZOD_HOME | quote }}
            {{- if .Values.customConfigs.enabled }}
            - name: custom-configs
              mountPath: /config/
            {{- end }}
            {{- if .Values.secrets.nodeKey }}
            - name: node-key
              mountPath: "{{ .Values.env.MEZOD_HOME }}/config/node_key.json"
              subPath: "node_key.json"
            {{- end }}
        #
        # The sidecar container for ethereum
        #
        - name: ethereum-sidecar
          image: "{{ .Values.image }}:{{ .Values.tag }}"
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          command:
            - mezod
            - ethereum-sidecar
            - --home=/tmp/dummy-data
            - --log_format=json
            - --ethereum-sidecar.server.ethereum-node-address=$(ETHEREUM_ENDPOINT)
            {{- if eq .Values.env.NETWORK "mainnet" }}
            - --ethereum-sidecar.server.network=mainnet
            {{- else if eq .Values.env.NETWORK "testnet" }}
            - --ethereum-sidecar.server.network=sepolia
            {{- end }}
          env:
            - name: ETHEREUM_ENDPOINT
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.credentials | quote }}
                  key: ETHEREUM_ENDPOINT
          ports:
            - name: client
              containerPort: 7500
              protocol: TCP
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
          securityContext:
            capabilities:
              drop:
                - ALL
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: dummy-data
              mountPath: /tmp/dummy-data
        #
        # The sidecar container for Skip connect application
        #
        - name: connect-sidecar
          image: "{{ .Values.connectSidecar.image }}:{{ .Values.connectSidecar.tag }}"
          imagePullPolicy: {{ .Values.connectSidecar.imagePullPolicy }}
          command:
            - connect
            - --disable-telemetry
            - --log-disable-file-rotation
            - --port={{ .Values.connectSidecar.ports.http }}
            - --market-map-endpoint=localhost:{{ .Values.service.public.ports.grpc }}
          ports:
            - name: http
              containerPort: {{ .Values.connectSidecar.ports.http }}
              protocol: TCP
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
          securityContext:
            capabilities:
              drop:
                - ALL
            allowPrivilegeEscalation: false
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        storageClassName: {{ .Values.storage.className | quote }}
        accessModes: [ReadWriteOnce]
        resources:
          requests:
            storage: {{ .Values.storage.size | quote }}
        {{- if .Values.storage.useDataSource.enabled }}
        dataSource:
          apiGroup: {{ .Values.storage.useDataSource.apiGroup | quote }}
          kind: {{ .Values.storage.useDataSource.kind | quote }}
          name: {{ .Values.storage.useDataSource.name | quote }}
        {{- end }}
