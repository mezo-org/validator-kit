---
x-logging: &logging
  logging:
    driver: "json-file"
    options:
      max-size: "1m"
      max-file: "1"
      tag: "{{.Name}}"

x-platform: &platform
  platform: linux/amd64

x-networks: &networks
  networks:
    - mezo

x-restart: &restart
  restart: always

services:
  prometheus:
    <<: [*logging, *platform, *networks, *restart]
    container_name: prometheus
    image: prom/prometheus:v2.54.1
    expose:
      - 9090
    # Changing user to root to access docker.sock
    # https://github.com/prometheus/prometheus/issues/8185
    user: root
    command:
      - "--config.file=/etc/prometheus/prometheus.yaml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=7d"
    volumes:
      - prometheus:/prometheus
      - ./configs/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml:ro
      - ./configs/prometheus/alerts.yaml:/etc/prometheus/alerts.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # load json-exporter targets depending on the network
      - ./configs/prometheus/json-exporter-targets.${NETWORK}.yaml:/json-exporter-targets.yaml:ro

  #
  # Scrape metrics from bootstrap nodes and expose them to Prometheus
  #
  json-exporter:
    <<: [*logging, *platform, *networks, *restart]
    container_name: json-exporter
    image: prometheuscommunity/json-exporter:v0.6.0
    expose:
      - 7979
    command:
      - "--config.file=/config.yaml"
    volumes:
      - ./configs/json-exporter/config.yaml:/config.yaml:ro

  alertmanager:
    <<: [*logging, *platform, *networks, *restart]
    container_name: alertmanager
    image: prom/alertmanager:v0.27.0
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yaml"
      - "--storage.path=/alertmanager"
    volumes:
      - alertmanager:/alertmanager
      - ./configs/alertmanager.yaml:/etc/alertmanager/alertmanager.yaml:ro
    expose:
      - 9093

  loki:
    <<: [*logging, *platform, *networks, *restart]
    container_name: loki
    image: grafana/loki:3.2.0
    command:
      - "-config.file=/etc/loki/loki.yaml"
    volumes:
      - loki:/loki
      - ./configs/loki/loki.yaml:/etc/loki/loki.yaml:ro
      - ./configs/loki/alerts.yaml:/loki/rules/fake/alerts.yaml:ro
    expose:
      - 3100

  promtail:
    <<: [*logging, *platform, *networks, *restart]
    container_name: promtail
    image: grafana/promtail:3.2.0
    command:
      - "-config.file=/etc/promtail/promtail.yaml"
    volumes:
      - ./configs/promtail.yaml:/etc/promtail/promtail.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro

  grafana:
    <<: [*logging, *platform, *networks, *restart]
    container_name: grafana
    image: grafana/grafana:11.2.2
    expose:
      - 3000
    environment:
      - GF_SERVER_DOMAIN=${DOMAIN}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_FEATURE_TOGGLES_ENABLE=lokiLogsDataplane
      - GF_INSTALL_PLUGINS=https://storage.googleapis.com/integration-artifacts/grafana-lokiexplore-app/grafana-lokiexplore-app-latest.zip;grafana-lokiexplore-app
    volumes:
      - grafana:/var/lib/grafana
      - ./configs/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./configs/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro

  caddy:
    <<: [*logging, *platform, *networks, *restart]
    container_name: caddy
    image: caddy:2.8.4-alpine
    command:
      - caddy
      - reverse-proxy
      - --access-log
      - --from
      - "https://${DOMAIN}"
      - --to
      - "grafana:3000"
      - --internal-certs # Use internal certificates (self-signed)
    # Expose ports 80 and 443 for HTTP and HTTPS to the outside world
    ports:
      - 80:80
      - 443:443
    labels:
      promtail.scrape: "true"

# Use external network "mezo" created by the validator's deployment
networks:
  mezo:
    external: true

volumes:
  prometheus:
  alertmanager:
  loki:
  grafana:
